'use strict';

/**
 * Module dependencies.
 */
let app = require('../app');
let debug = require('debug')('zhaogong-be:server');
let http = require('http');
let ut = require('../utils/utils');
let cf = require('../beconfig.js');
let globalData = require('../globalData.js');
let log = ut.logger(__filename);
let schedule = require("node-schedule");


/**
 * 系统启动时获取access_token，便于后续调用微信各类接口时使用。
 * 并且每隔一段时间刷新access_token。
 */
ut.refreshAT();

// API:https://www.npmjs.com/package/node-schedule
schedule.scheduleJob('*/60 * * * *', function () {
    ut.refreshAT();
});

/**
 * Create Emitter for emitting event on special scene
 */
const EventEmitter = require('events');
class ZgEmitter extends EventEmitter {
}

let emt = new ZgEmitter();

//Processing notification
emt.on('notify', (argsObject) => {
    let nRules = cf.notifyRules[argsObject.type];
    log.debug('通知事件如下：', argsObject, nRules);

    //根据模板向wc.js发送消息
    try {
        log.debug('send to rooms1', {data: argsObject.data, rule: nRules});
        nRules.wechat ? global.socket.emit('event', {data: argsObject.data, rule: nRules}) : '';


        //如果rooms都存在，则向多个群发送
        if (nRules.fields && nRules.wechat && nRules.rooms) {

            //根据fields属性组装要发送的内容
            let notifyContent = {};
            nRules.fields.forEach((item, index, arr) => {

                //如果列名中包含*号，则对带星字段的数据屏蔽处理
                if (item.indexOf('*') >= 0) {
                    item = item.replace('*', '');
                    //console.log('888888888888888888888',argsObject.data[item]);
                    notifyContent[item] = argsObject.data[item].replace(/[\d]/g, '*')
                } else {
                    notifyContent[item] = argsObject.data[item];
                }
            });

            let currentRule = nRules;
            nRules.rooms.forEach((item, index, arr) => {
                setTimeout(() => {
                    currentRule.room = item;
                    //log.debug('send to rooms2', {data: notifyContent, rule: {room: item, desc: nRules.desc}});
                    let data = ut.getSpeakSpec(notifyContent, nRules.fields, nRules.words);
                    global.socket.emit('event', {data: data, rule: {room: item, desc: nRules.desc}})
                    //global.socket.emit('event', {data: notifyContent, rule: {room:item,desc:nRules.desc}})
                }, 2000)
            })
        }

    } catch (err) {
        log.error('发送通知产生异常', err);
    }
    //TODO:根据短信通知模板给指定手机号发送消息，或将短信发送与wc整合。
    //nRules.sms? ut.sendSms('tppltId',argsObject.data.mobile,argsObject.data.rule.desc):'';

    //TODO:补充公众号、邮件渠道的发送功能。
});

//Processing error
emt.on('error', (argsObject) => {
    log.error('ZG-Error:error event', argsObject);
});
//emt will be referenced by utils.js,
global.emt = emt;

/**
 * 进程级捕获未捕捉的异常，避免出现系统进程失效
 */
process.on('uncaughtException', (err) => {
    log.error('ZG-Error:uncaughtException event', err);
    try {
        ut.notify({data: JSON.stringify(err), type: 'N_SUEXPT'});
    } catch (err2) {
        log.error('ut.notify() error:', err2);
    }
});


/**
 * Get port from environment and store in Express.
 */
let port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */
let server = http.createServer(app);

/**
 * Create Websocket server for sending/recieving message to/from channel(mail,wechat,sms....)
 */
let io = require('socket.io')(server);
io.on('connection', function (socket) {
    log.info('Client connected.');
    global.socket = socket;

    socket.on('message', function (data) {
        log.info('websocket receive message:', data);
    });
    socket.on('event', function (data) {
        log.info('websocket receive event:', data);
        eventProcess(data);
    });
    socket.on('disconnecting', (reason) => {
        log.info('websocket disconnecting reason :', reason)
    });
    socket.on('disconnect', (reason) => {
        log.info(' disconnect reason :', reason);
    });
});


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


///////////////////////////////////////////
// const WebSocketServer = require('ws').Server;
// let wsServer = new WebSocketServer({port:8080});
// wsServer.on('connection', function (ws) {
//     console.log('client connect');
//     ws.on('message', function (message) {
//         console.log('Received: '+ message);
//     });
//
//     let data=[{id:'10001'}];
//     ws.send(data,function (err) {
//         if(!err){
//             console.log('success');
//         }else{
//             throw err;
//         }
//     })
// });
///////////////////////////////////////////


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }


    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            log.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            log.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    log.info('Listening on ' + bind);
}


function eventProcess(data) {
    if (/#instruct#/.test(data)) {

        const mobile = data.replace('#instruct#', '').trim();

        let MongoClient = require('mongodb').MongoClient;
        MongoClient.connect(cf.dbUrl, function (err, db) {
            let coll = db.collection('user');
            let t = require('assert');

            coll.updateOne(
                {'mobile': mobile},
                {
                    $set: {rolecfm: true},                        //你好
                    $currentDate: {'updt': true}
                },
                {upsert: true, w: 1}, function (err, r) {
                    t.equal(null, err);
                    t.equal(1, r.result.n);
                    db.close();
                    ut.notify({data: {'mobile': mobile}, type: 'N_ROCNFM'});
                });

        });
    }
}